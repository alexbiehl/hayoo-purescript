(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unit = {};
    var show = function (dict) {
        return dict.show;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_53) {
        return function (_54) {
            return _53;
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_3) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_2) {
                        return $$return(__dict_Monad_16)(_3(_2));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Eq: Eq, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "<>": $less$greater, 
        "||": $bar$bar, 
        refIneq: refIneq, 
        refEq: refEq, 
        "==": $eq$eq, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "<$>": $less$dollar$greater, 
        show: show, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        "const": $$const, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        eqString: eqString, 
        boolLikeBoolean: boolLikeBoolean
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    
    function runFn4(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    }
    ;
    return {
        runFn4: runFn4, 
        runFn3: runFn3, 
        runFn2: runFn2
    };
})();
var PS = PS || {};
PS.Data_Void = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Contravariant = PS.Data_Contravariant;
    var Void = function (x) {
        return x;
    };
    var absurd = function (a) {
        var spin = function (__copy__76) {
            var _76 = __copy__76;
            tco: while (true) {
                var __tco__76 = _76;
                _76 = __tco__76;
                continue tco;
            };
        };
        return spin(a);
    };
    return {
        Void: Void, 
        absurd: absurd
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Ref = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function newRef(val) {
    return function () {
      return { value: val };
    };
  }
;
    
  function readRef(ref) {
    return function() {
      return ref.value;
    };
  }
;
    
  function writeRef(ref) {
    return function(val) {
      return function() {
        ref.value = val;
        return {};
      };
    };
  }
;
    return {
        writeRef: writeRef, 
        readRef: readRef, 
        newRef: newRef
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function unsafeInterleaveEff(f) {
      return f;
    }
    ;
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Functor = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $dollar$greater = function (__dict_Functor_38) {
        return function (f) {
            return function (x) {
                return Prelude["<$>"](__dict_Functor_38)(Prelude["const"](x))(f);
            };
        };
    };
    return {
        "$>": $dollar$greater
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $times$greater = function (__dict_Apply_50) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_50)(Prelude["<$>"](__dict_Apply_50["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    return {
        "*>": $times$greater
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Right` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Left y == Left y
     *  | ```
     */
    var functorEither = new Prelude.Functor(function (_105) {
        return function (_106) {
            if (_106 instanceof Left) {
                return new Left(_106.value0);
            };
            if (_106 instanceof Right) {
                return new Right(_105(_106.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    
    /**
     *  | Takes two functions and an `Either` value, if the value is a `Left` the
     *  | inner value is applied to the first function, if the value is a `Right`
     *  | the inner value is applied to the second function.
     *  |
     *  | ``` purescript
     *  | either f g (Left x) == f x
     *  | either f g (Right y) == g y
     *  | ```
     */
    var either = function (_102) {
        return function (_103) {
            return function (_104) {
                if (_104 instanceof Left) {
                    return _102(_104.value0);
                };
                if (_104 instanceof Right) {
                    return _103(_104.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    
    /**
     *  | The `Apply` instance allows functions contained within a `Right` to
     *  | transform a value contained within a `Right` using the `(<*>)` operator:
     *  |
     *  | ``` purescript
     *  | Right f <*> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are left untouched:
     *  |
     *  | ``` purescript
     *  | Left f <*> Right x == Left x
     *  | Right f <*> Left y == Left y
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
     *  | pure function to take `Either`-typed arguments so `f :: a -> b -> c`
     *  | becomes `f :: Either l a -> Either l b -> Either l c`:
     *  |
     *  | ``` purescript
     *  | f <$> Right x <*> Right y == Right (f x y)
     *  | ```
     *  |
     *  | The `Left`-preserving behaviour of both operators means the result of
     *  | an expression like the above but where any one of the values is `Left`
     *  | means the whole result becomes `Left` also, taking the first `Left` value
     *  | found:
     *  |
     *  | ``` purescript
     *  | f <$> Left x <*> Right y == Left x
     *  | f <$> Right x <*> Left y == Left y
     *  | f <$> Left x <*> Left y == Left x
     *  | ```
     */
    var applyEither = new Prelude.Apply(function (_107) {
        return function (_108) {
            if (_107 instanceof Left) {
                return new Left(_107.value0);
            };
            if (_107 instanceof Right) {
                return Prelude["<$>"](functorEither)(_107.value0)(_108);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    
    /**
     *  | The `Bind` instance allows sequencing of `Either` values and functions that
     *  | return an `Either` by using the `>>=` operator:
     *  |
     *  | ``` purescript
     *  | Left x >>= f = Left x
     *  | Right x >>= f = f x
     *  | ```
     */
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_101) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    
    /**
     *  | The `Applicative` instance enables lifting of values into `Either` with the
     *  | `pure` or `return` function (`return` is an alias for `pure`):
     *  |
     *  | ``` purescript
     *  | pure x :: Either _ _ == Right x
     *  | return x :: Either _ _ == Right x
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
     *  | `pure` can be used to pass a mixture of `Either` and non-`Either` typed
     *  | values to a function that does not usually expect them, by using `pure`
     *  | for any value that is not already `Either` typed:
     *  |
     *  | ``` purescript
     *  | f <$> Right x <*> pure y == Right (f x y)
     *  | ```
     *  |
     *  | Even though `pure = Right` it is recommended to use `pure` in situations
     *  | like this as it allows the choice of `Applicative` to be changed later
     *  | without having to go through and replace `Right` with a new constructor.
     */
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    return {
        Left: Left, 
        Right: Right, 
        either: either, 
        functorEither: functorEither, 
        applyEither: applyEither, 
        applicativeEither: applicativeEither, 
        bindEither: bindEither
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Just` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Just x == Just (f x)
     *  | ```
     *  |
     *  | `Nothing` values are left untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Nothing == Nothing
     *  | ```
     */
    var functorMaybe = new Prelude.Functor(function (_123) {
        return function (_124) {
            if (_124 instanceof Just) {
                return new Just(_123(_124.value0));
            };
            return Nothing.value;
        };
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        functorMaybe: functorMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    var semigroupArray = new Prelude.Semigroup(append);
    return {
        append: append, 
        map: map, 
        semigroupArray: semigroupArray
    };
})();
var PS = PS || {};
PS.Data_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Array = PS.Data_Array;
    var Data_Either = PS.Data_Either;
    
  function toForeign(value) {
    return value;
  }
  ;
    
  function unsafeFromForeign(value) {
    return value;
  }
  ;
    
  function typeOf(value) {
    return typeof value;
  }
  ;
    
  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;
    
  function isNull(value) {
    return value === null;
  }
  ;
    
  function isUndefined(value) {
    return value === undefined;
  }
  ;
    var TypeMismatch = (function () {
        function TypeMismatch(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        TypeMismatch.create = function (value0) {
            return function (value1) {
                return new TypeMismatch(value0, value1);
            };
        };
        return TypeMismatch;
    })();
    var ErrorAtProperty = (function () {
        function ErrorAtProperty(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        ErrorAtProperty.create = function (value0) {
            return function (value1) {
                return new ErrorAtProperty(value0, value1);
            };
        };
        return ErrorAtProperty;
    })();
    var unsafeReadPrim = function (_161) {
        return function (_162) {
            if (tagOf(_162) === _161) {
                return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_162));
            };
            return new Data_Either.Left(new TypeMismatch(_161, tagOf(_162)));
        };
    };
    var readString = unsafeReadPrim("String");
    return {
        TypeMismatch: TypeMismatch, 
        ErrorAtProperty: ErrorAtProperty, 
        readString: readString, 
        isUndefined: isUndefined, 
        isNull: isNull, 
        tagOf: tagOf, 
        typeOf: typeOf, 
        unsafeFromForeign: unsafeFromForeign, 
        toForeign: toForeign
    };
})();
var PS = PS || {};
PS.Data_Foreign_Index = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    
  function unsafeReadPropImpl(f, s, key, value) {
    return value == null ? f : s(value[key]);
  }
  ;
    
  function unsafeHasOwnProperty(prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  }
  ;
    
  function unsafeHasProperty(prop, value) {
    return prop in value;
  }
  ;
    var Index = function ($bang, errorAt, hasOwnProperty, hasProperty) {
        this["!"] = $bang;
        this.errorAt = errorAt;
        this.hasOwnProperty = hasOwnProperty;
        this.hasProperty = hasProperty;
    };
    var $bang = function (dict) {
        return dict["!"];
    };
    var unsafeReadProp = function (k) {
        return function (value) {
            return unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
        };
    };
    var prop = unsafeReadProp;
    var hasPropertyImpl = function (_169) {
        return function (_170) {
            if (Data_Foreign.isNull(_170)) {
                return false;
            };
            if (Data_Foreign.isUndefined(_170)) {
                return false;
            };
            if (Data_Foreign.typeOf(_170) === "object" || Data_Foreign.typeOf(_170) === "function") {
                return unsafeHasProperty(_169, _170);
            };
            return false;
        };
    };
    var hasOwnPropertyImpl = function (_167) {
        return function (_168) {
            if (Data_Foreign.isNull(_168)) {
                return false;
            };
            if (Data_Foreign.isUndefined(_168)) {
                return false;
            };
            if (Data_Foreign.typeOf(_168) === "object" || Data_Foreign.typeOf(_168) === "function") {
                return unsafeHasOwnProperty(_167, _168);
            };
            return false;
        };
    };
    var indexString = new Index(Prelude.flip(prop), Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl);
    var errorAt = function (dict) {
        return dict.errorAt;
    };
    return {
        Index: Index, 
        errorAt: errorAt, 
        "!": $bang, 
        prop: prop, 
        indexString: indexString
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        Monoid: Monoid, 
        mempty: mempty
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    return {
        Tuple: Tuple
    };
})();
var PS = PS || {};
PS.Halogen_Signal = (function () {
    "use strict";
    var Data_Tuple = PS.Data_Tuple;
    var Prelude = PS.Prelude;
    var Data_Profunctor = PS.Data_Profunctor;
    var Data_Profunctor_Strong = PS.Data_Profunctor_Strong;
    var Data_Profunctor_Choice = PS.Data_Profunctor_Choice;
    var Data_Either = PS.Data_Either;
    
    /**
     *  | A `SF` represents a state machine which responds to inputs of type `i`, producing outputs of type `o`.
     */
    var SF = function (x) {
        return x;
    };
    
    /**
     *  | `SF1` represents non-empty signals, i.e. signals with an initial output value.
     */
    var SF1 = function (x) {
        return x;
    };
    
    /**
     *  | Convert a `SF1` to a `SF` by ignoring its initial value
     */
    var tail = function (_374) {
        return _374.next;
    };
    
    /**
     *  | Creates a stateful `SF` based on a function which returns an output value
     */
    var stateful$prime = function (s) {
        return function (step) {
            var go = function (s_1) {
                return function (i) {
                    var _677 = step(s_1)(i);
                    return {
                        result: _677.value0, 
                        next: go(_677.value1)
                    };
                };
            };
            return go(s);
        };
    };
    
    /**
     *  | Convert a `SF` to a `SF1` by providing an initial value
     */
    var startingAt = function (s) {
        return function (o) {
            return {
                result: o, 
                next: s
            };
        };
    };
    
    /**
     *  | Creates a stateful `SF1`
     */
    var stateful = function (s) {
        return function (step) {
            return startingAt(stateful$prime(s)(function (s_1) {
                return function (i) {
                    var s$prime = step(s_1)(i);
                    return new Data_Tuple.Tuple(s$prime, s$prime);
                };
            }))(s);
        };
    };
    
    /**
     *  | Run a `SF` by providing an input
     */
    var runSF = function (_371) {
        return _371;
    };
    
    /**
     *  | Get the current value of a `SF1`
     */
    var head = function (_373) {
        return _373.result;
    };
    var semigroupoidSF1 = new Prelude.Semigroupoid(function (f) {
        return function (g) {
            return {
                result: head(f), 
                next: Prelude["<<<"](semigroupoidSF)(tail(f))(tail(g))
            };
        };
    });
    var semigroupoidSF = new Prelude.Semigroupoid(function (f) {
        return function (g) {
            return function (i) {
                var s1 = runSF(g)(i);
                var s2 = runSF(f)(head(s1));
                return Prelude["<<<"](semigroupoidSF1)(s2)(s1);
            };
        };
    });
    var functorSF1 = new Prelude.Functor(function (_377) {
        return function (_378) {
            return {
                result: _377(_378.result), 
                next: Prelude["<$>"](functorSF)(_377)(_378.next)
            };
        };
    });
    var functorSF = new Prelude.Functor(function (_375) {
        return function (_376) {
            return function (i) {
                return Prelude["<$>"](functorSF1)(_375)(_376(i));
            };
        };
    });
    
    /**
     *  | A `SF` which compares consecutive inputs using a helper function
     */
    var differencesWith = function (f) {
        return function (initial) {
            return stateful$prime(initial)(function (last) {
                return function (next) {
                    var d = f(last)(next);
                    return new Data_Tuple.Tuple(d, next);
                };
            });
        };
    };
    return {
        tail: tail, 
        head: head, 
        startingAt: startingAt, 
        differencesWith: differencesWith, 
        "stateful'": stateful$prime, 
        stateful: stateful, 
        runSF: runSF, 
        functorSF: functorSF, 
        functorSF1: functorSF1, 
        semigroupoidSF: semigroupoidSF, 
        semigroupoidSF1: semigroupoidSF1
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_273) {
        return function (__dict_Foldable_274) {
            return function (f) {
                return foldr(__dict_Foldable_274)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_273["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_273)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_275) {
        return function (__dict_Foldable_276) {
            return Prelude.flip(traverse_(__dict_Applicative_275)(__dict_Foldable_276));
        };
    };
    var foldableMaybe = new Foldable(function (__dict_Monoid_288) {
        return function (_434) {
            return function (_435) {
                if (_435 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_288);
                };
                if (_435 instanceof Data_Maybe.Just) {
                    return _434(_435.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_431) {
        return function (_432) {
            return function (_433) {
                if (_433 instanceof Data_Maybe.Nothing) {
                    return _432;
                };
                if (_433 instanceof Data_Maybe.Just) {
                    return _431(_432)(_433.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_428) {
        return function (_429) {
            return function (_430) {
                if (_430 instanceof Data_Maybe.Nothing) {
                    return _429;
                };
                if (_430 instanceof Data_Maybe.Just) {
                    return _428(_430.value0)(_429);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_291) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_291["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_291))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        for_: for_, 
        traverse_: traverse_, 
        foldr: foldr, 
        foldableArray: foldableArray, 
        foldableMaybe: foldableMaybe
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Events_Handler = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Foldable = PS.Data_Foldable;
    var DOM = PS.DOM;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Halogen_HTML_Events_Types = PS.Halogen_HTML_Events_Types;
    var Data_Array = PS.Data_Array;
    function preventDefaultImpl(e) {  return function() {    e.preventDefault();  };};
    function stopPropagationImpl(e) {  return function() {    e.stopPropagation();  };};
    function stopImmediatePropagationImpl(e) {  return function() {    e.stopImmediatePropagation();  };};
    var PreventDefault = (function () {
        function PreventDefault() {

        };
        PreventDefault.value = new PreventDefault();
        return PreventDefault;
    })();
    var StopPropagation = (function () {
        function StopPropagation() {

        };
        StopPropagation.value = new StopPropagation();
        return StopPropagation;
    })();
    var StopImmediatePropagation = (function () {
        function StopImmediatePropagation() {

        };
        StopImmediatePropagation.value = new StopImmediatePropagation();
        return StopImmediatePropagation;
    })();
    
    /**
     *  | This applicative functor supports the following operations on events:
     *  |
     *  | - `preventDefault`
     *  | - `stopPropagation`
     *  | - `stopImmediatePropagation`
     *  |
     *  | It can be used as follows:
     *  |
     *  | ```purescript
     *  | import Control.Functor (($>))
     *  |
     *  | H.a (E.onclick \_ -> E.preventDefault $> ClickHandler) (H.text "Click here")
     *  | ```
     */
    var EventHandler = (function () {
        function EventHandler(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        EventHandler.create = function (value0) {
            return function (value1) {
                return new EventHandler(value0, value1);
            };
        };
        return EventHandler;
    })();
    
    /**
     *  | This function can be used to update an event and return the wrapped value
     */
    var runEventHandler = function (_486) {
        return function (_487) {
            var applyUpdate = function (_492) {
                if (_492 instanceof PreventDefault) {
                    return preventDefaultImpl(_486);
                };
                if (_492 instanceof StopPropagation) {
                    return stopPropagationImpl(_486);
                };
                if (_492 instanceof StopImmediatePropagation) {
                    return stopImmediatePropagationImpl(_486);
                };
                throw new Error("Failed pattern match");
            };
            return Control_Apply["*>"](Control_Monad_Eff.applyEff)(Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(_487.value0)(applyUpdate))(Prelude["return"](Control_Monad_Eff.monadEff)(_487.value1));
        };
    };
    
    /**
     *  | Call the `preventDefault` method on the current event
     */
    var preventDefault = new EventHandler([ PreventDefault.value ], Prelude.unit);
    var functorEventHandler = new Prelude.Functor(function (_488) {
        return function (_489) {
            return new EventHandler(_489.value0, _488(_489.value1));
        };
    });
    var applyEventHandler = new Prelude.Apply(function (_490) {
        return function (_491) {
            return new EventHandler(Prelude["<>"](Data_Array.semigroupArray)(_490.value0)(_491.value0), _490.value1(_491.value1));
        };
    }, function () {
        return functorEventHandler;
    });
    var applicativeEventHandler = new Prelude.Applicative(function () {
        return applyEventHandler;
    }, EventHandler.create([  ]));
    return {
        runEventHandler: runEventHandler, 
        preventDefault: preventDefault, 
        functorEventHandler: functorEventHandler, 
        applyEventHandler: applyEventHandler, 
        applicativeEventHandler: applicativeEventHandler
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Maybe = PS.Data_Maybe;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    return {
        joinWith: joinWith
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableMaybe = new Traversable(function () {
        return Data_Foldable.foldableMaybe;
    }, function () {
        return Data_Maybe.functorMaybe;
    }, function (__dict_Applicative_315) {
        return function (_504) {
            if (_504 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_315)(Data_Maybe.Nothing.value);
            };
            if (_504 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_315["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_504.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_314) {
        return function (_502) {
            return function (_503) {
                if (_503 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_314)(Data_Maybe.Nothing.value);
                };
                if (_503 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_314["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_502(_503.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    return {
        Traversable: Traversable, 
        traverse: traverse, 
        traversableMaybe: traversableMaybe
    };
})();
var PS = PS || {};
PS.Data_Foreign_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Foreign_Null = PS.Data_Foreign_Null;
    var Data_Foreign_Undefined = PS.Data_Foreign_Undefined;
    var Data_Foreign_NullOrUndefined = PS.Data_Foreign_NullOrUndefined;
    var Data_Either = PS.Data_Either;
    var Data_Foreign_Index = PS.Data_Foreign_Index;
    var IsForeign = function (read) {
        this.read = read;
    };
    var stringIsForeign = new IsForeign(Data_Foreign.readString);
    var read = function (dict) {
        return dict.read;
    };
    var readWith = function (__dict_IsForeign_336) {
        return function (f) {
            return function (value) {
                return Data_Either.either(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(f))(Data_Either.Right.create)(read(__dict_IsForeign_336)(value));
            };
        };
    };
    var readProp = function (__dict_IsForeign_337) {
        return function (__dict_Index_338) {
            return function (prop) {
                return function (value) {
                    return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Index["!"](__dict_Index_338)(value)(prop))(readWith(__dict_IsForeign_337)(Data_Foreign_Index.errorAt(__dict_Index_338)(prop)));
                };
            };
        };
    };
    return {
        IsForeign: IsForeign, 
        readProp: readProp, 
        readWith: readWith, 
        read: read, 
        stringIsForeign: stringIsForeign
    };
})();
var PS = PS || {};
PS.Halogen_Internal_VirtualDOM = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Nullable = PS.Data_Nullable;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    function prop(key, value, props) {  return function() {    props[key] = value;  };};
    function handlerProp(key, f, props) {  return function() {    var Hook = function () {};    Hook.prototype.callback = function(e) {      f(e)();    };    Hook.prototype.hook = function(node) {      node.addEventListener(key, this.callback);    };    Hook.prototype.unhook = function(node) {      node.removeEventListener(key, this.callback);    };    props['data-halogen-hook-' + key] = new Hook(f);  };};
    function newProps() {  return {};};
    function runProps(props) {  return props();};
    function createElement(vtree) {  return require('virtual-dom/create-element')(vtree);};
    function diff(vtree1) {  return function createElement(vtree2) {    return require('virtual-dom/diff')(vtree1, vtree2);  };};
    function patch(p) {  return function(node) {    return function() {      return require('virtual-dom/patch')(node, p);    };  };};
    function vtext(s) {  var VText = require('virtual-dom/vnode/vtext');  return new VText(s);};
    function vnode(name) {  return function(props) {    return function(children) {      var VirtualNode = require('virtual-dom/vnode/vnode');      return new VirtualNode(name, props, children);    };  };};
    return {
        vnode: vnode, 
        vtext: vtext, 
        patch: patch, 
        diff: diff, 
        createElement: createElement, 
        runProps: runProps, 
        newProps: newProps, 
        handlerProp: handlerProp, 
        prop: prop
    };
})();
var PS = PS || {};
PS.Halogen_HTML = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Function = PS.Data_Function;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    var Control_Monad_Eff_Unsafe = PS.Control_Monad_Eff_Unsafe;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Void = PS.Data_Void;
    var Data_String = PS.Data_String;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foreign = PS.Data_Foreign;
    var Data_StrMap = PS.Data_StrMap;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Halogen_HTML_Events_Types = PS.Halogen_HTML_Events_Types;
    
    /**
     *  | A type-safe wrapper for a HTML tag name
     */
    var TagName = function (x) {
        return x;
    };
    
    /**
     *  | A type-safe wrapper for event names.
     *  |
     *  | The phantom type `fields` describes the event type which we can expect to exist on events
     *  | corresponding to this name.
     */
    var EventName = function (x) {
        return x;
    };
    
    /**
     *  | A type-safe wrapper for attribute names
     */
    var AttributeName = function (x) {
        return x;
    };
    
    /**
     *  | The type `AttributeValue i` represents values which can appear inside HTML attributes.
     *  | Values are either strings, booleans, maps or event handlers. Event handlers are required to produce outputs of type `i`.
     */
    var StringAttribute = (function () {
        function StringAttribute(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        StringAttribute.create = function (value0) {
            return function (value1) {
                return new StringAttribute(value0, value1);
            };
        };
        return StringAttribute;
    })();
    
    /**
     *  | The type `AttributeValue i` represents values which can appear inside HTML attributes.
     *  | Values are either strings, booleans, maps or event handlers. Event handlers are required to produce outputs of type `i`.
     */
    var BooleanAttribute = (function () {
        function BooleanAttribute(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        BooleanAttribute.create = function (value0) {
            return function (value1) {
                return new BooleanAttribute(value0, value1);
            };
        };
        return BooleanAttribute;
    })();
    
    /**
     *  | The type `AttributeValue i` represents values which can appear inside HTML attributes.
     *  | Values are either strings, booleans, maps or event handlers. Event handlers are required to produce outputs of type `i`.
     */
    var MapAttribute = (function () {
        function MapAttribute(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        MapAttribute.create = function (value0) {
            return function (value1) {
                return new MapAttribute(value0, value1);
            };
        };
        return MapAttribute;
    })();
    
    /**
     *  | The type `AttributeValue i` represents values which can appear inside HTML attributes.
     *  | Values are either strings, booleans, maps or event handlers. Event handlers are required to produce outputs of type `i`.
     */
    var HandlerAttribute = (function () {
        function HandlerAttribute(value0) {
            this.value0 = value0;
        };
        HandlerAttribute.create = function (value0) {
            return new HandlerAttribute(value0);
        };
        return HandlerAttribute;
    })();
    
    /**
     *  | A value of type `Attribute i` represents a collection of HTML attributes, whose
     *  | event handlers produce outputs of type `i`.
     *  |
     *  | The `Semigroup` instance allows attributes to be combined.
     */
    var Attribute = (function () {
        function Attribute(value0) {
            this.value0 = value0;
        };
        Attribute.create = function (value0) {
            return new Attribute(value0);
        };
        return Attribute;
    })();
    
    /**
     *  | The `HTML` type represents HTML documents before being rendered to the virtual DOM, and ultimately,
     *  | the actual DOM.
     *  |
     *  | This representation is useful because it supports various typed transformations. It also gives a 
     *  | strongly-typed representation for the events which can be generated by a document.
     *  |
     *  | The type parameter `a` corresponds to holes in the document which may be filled with `VTree`s during
     *  | rendering. This way, the `HTML` type is kept pure while supporting custom rendering, e.g. embedding
     *  | third-party components.
     *  |
     *  | The type parameter `i` represents the type of events which can be generated by this document.
     *  |
     *  | The meanings of the constructors of this type are as follows:
     *  |
     *  | - `Text`, `Element` - regular text and element nodes
     *  | - `Placeholder` - A placeholder for a document. This can be replaced during rendering or by using the 
     *  |   `graft` operation.
     */
    var Text = (function () {
        function Text(value0) {
            this.value0 = value0;
        };
        Text.create = function (value0) {
            return new Text(value0);
        };
        return Text;
    })();
    
    /**
     *  | The `HTML` type represents HTML documents before being rendered to the virtual DOM, and ultimately,
     *  | the actual DOM.
     *  |
     *  | This representation is useful because it supports various typed transformations. It also gives a 
     *  | strongly-typed representation for the events which can be generated by a document.
     *  |
     *  | The type parameter `a` corresponds to holes in the document which may be filled with `VTree`s during
     *  | rendering. This way, the `HTML` type is kept pure while supporting custom rendering, e.g. embedding
     *  | third-party components.
     *  |
     *  | The type parameter `i` represents the type of events which can be generated by this document.
     *  |
     *  | The meanings of the constructors of this type are as follows:
     *  |
     *  | - `Text`, `Element` - regular text and element nodes
     *  | - `Placeholder` - A placeholder for a document. This can be replaced during rendering or by using the 
     *  |   `graft` operation.
     */
    var Element = (function () {
        function Element(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        Element.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new Element(value0, value1, value2);
                };
            };
        };
        return Element;
    })();
    
    /**
     *  | The `HTML` type represents HTML documents before being rendered to the virtual DOM, and ultimately,
     *  | the actual DOM.
     *  |
     *  | This representation is useful because it supports various typed transformations. It also gives a 
     *  | strongly-typed representation for the events which can be generated by a document.
     *  |
     *  | The type parameter `a` corresponds to holes in the document which may be filled with `VTree`s during
     *  | rendering. This way, the `HTML` type is kept pure while supporting custom rendering, e.g. embedding
     *  | third-party components.
     *  |
     *  | The type parameter `i` represents the type of events which can be generated by this document.
     *  |
     *  | The meanings of the constructors of this type are as follows:
     *  |
     *  | - `Text`, `Element` - regular text and element nodes
     *  | - `Placeholder` - A placeholder for a document. This can be replaced during rendering or by using the 
     *  |   `graft` operation.
     */
    var Placeholder = (function () {
        function Placeholder(value0) {
            this.value0 = value0;
        };
        Placeholder.create = function (value0) {
            return new Placeholder(value0);
        };
        return Placeholder;
    })();
    
    /**
     *  | Create a HTML document which represents a text node.
     */
    var text = Text.create;
    
    /**
     *  | Create a tag name
     */
    var tagName = TagName;
    var ul = Element.create(tagName("ul"));
    var semigroupAttribute = new Prelude.Semigroup(function (_607) {
        return function (_608) {
            return new Attribute(Prelude["<>"](Data_Array.semigroupArray)(_607.value0)(_608.value0));
        };
    });
    
    /**
     *  | Unwrap a `TagName` to get the tag name as a `String`.
     */
    var runTagName = function (_597) {
        return _597;
    };
    
    /**
     *  | Unpack an event name
     */
    var runEventName = function (_594) {
        return _594;
    };
    
    /**
     *  | Unpack an attribute name
     */
    var runAttributeName = function (_593) {
        return _593;
    };
    var monoidAttribute = new Data_Monoid.Monoid(function () {
        return semigroupAttribute;
    }, new Attribute([  ]));
    var li = Element.create(tagName("li"));
    var input = Element.create(tagName("input"));
    var img = Element.create(tagName("img"));
    var form = Element.create(tagName("form"));
    
    /**
     *  Create an event name
     */
    var eventName = EventName;
    var div = Element.create(tagName("div"));
    var div_ = div(Data_Monoid.mempty(monoidAttribute));
    
    /**
     *  | Convert a collection of attributes to an immutable property collection by providing an event handler.
     *  |
     *  | This function uses a temporary mutable property collection for efficiency.
     */
    var attributesToProps = function (_595) {
        return function (_596) {
            var addProp = function (_609) {
                return function (_610) {
                    if (_610 instanceof MapAttribute) {
                        return Halogen_Internal_VirtualDOM.prop(runAttributeName(_610.value0), _610.value1, _609);
                    };
                    if (_610 instanceof StringAttribute) {
                        return Halogen_Internal_VirtualDOM.prop(runAttributeName(_610.value0), _610.value1, _609);
                    };
                    if (_610 instanceof BooleanAttribute) {
                        return Halogen_Internal_VirtualDOM.prop(runAttributeName(_610.value0), _610.value1, _609);
                    };
                    if (_610 instanceof HandlerAttribute) {
                        var addEvent = function (key_3) {
                            return function (f) {
                                var handler = function (ev) {
                                    return function __do() {
                                        var _36 = Control_Monad_Eff_Unsafe.unsafeInterleaveEff(Halogen_HTML_Events_Handler.runEventHandler(ev)(f(ev)))();
                                        return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_36)(_595)();
                                    };
                                };
                                return Halogen_Internal_VirtualDOM.handlerProp(runEventName(key_3), handler, _609);
                            };
                        };
                        return _610.value0(addEvent);
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return Halogen_Internal_VirtualDOM.runProps(function __do() {
                var _37 = Halogen_Internal_VirtualDOM.newProps();
                Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(_596.value0)(addProp(_37))();
                return _37;
            });
        };
    };
    
    /**
     *  Create an attribute name
     */
    var attributeName = AttributeName;
    var a = Element.create(tagName("a"));
    
    /**
     *  | A more general version of `renderHtml'`.
     *  |
     *  | The first argument is an event handler.
     *  | 
     *  | The second argument is used to replace placeholder nodes. If you are not using placeholder nodes, you
     *  | might prefer to use `renderHtml` instead.
     */
    var renderHtml$prime = function (_600) {
        return function (_601) {
            return function (_602) {
                if (_602 instanceof Text) {
                    return Halogen_Internal_VirtualDOM.vtext(_602.value0);
                };
                if (_602 instanceof Element) {
                    return Halogen_Internal_VirtualDOM.vnode(runTagName(_602.value0))(attributesToProps(_600)(_602.value1))(Data_Array.map(renderHtml$prime(_600)(_601))(_602.value2));
                };
                if (_602 instanceof Placeholder) {
                    return _601(_602.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return {
        StringAttribute: StringAttribute, 
        BooleanAttribute: BooleanAttribute, 
        MapAttribute: MapAttribute, 
        HandlerAttribute: HandlerAttribute, 
        Attribute: Attribute, 
        Text: Text, 
        Element: Element, 
        Placeholder: Placeholder, 
        "renderHtml'": renderHtml$prime, 
        ul: ul, 
        li: li, 
        input: input, 
        img: img, 
        form: form, 
        div_: div_, 
        div: div, 
        a: a, 
        text: text, 
        attributesToProps: attributesToProps, 
        runEventName: runEventName, 
        eventName: eventName, 
        runAttributeName: runAttributeName, 
        attributeName: attributeName, 
        runTagName: runTagName, 
        tagName: tagName, 
        semigroupAttribute: semigroupAttribute, 
        monoidAttribute: monoidAttribute
    };
})();
var PS = PS || {};
PS.Halogen = (function () {
    "use strict";
    var Halogen_Signal = PS.Halogen_Signal;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Void = PS.Data_Void;
    var Control_Monad_Eff_Ref = PS.Control_Monad_Eff_Ref;
    var Halogen_HTML = PS.Halogen_HTML;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_Aff = PS.Control_Monad_Aff;
    
    /**
     *  | A signal which emits patches corresponding to successive `VTree`s.
     *  |
     *  | This function can be used to create alternative top-level handlers which use `virtual-dom`.
     */
    var changes = Halogen_Signal.differencesWith(Halogen_Internal_VirtualDOM.diff);
    
    /**
     *  | `runUIEff` is a more general version of `runUI` which can be used to construct other
     *  | top-level handlers for applications.
     *  |
     *  | `runUIEff` takes a signal function which creates HTML documents containing _requests_, 
     *  | and a handler function which accepts requests and provides new inputs to a continuation as they
     *  | become available.
     *  |
     *  | For example, the handler function might be responsible for issuing AJAX requests on behalf of the
     *  | application.
     *  |
     *  | In this way, all effects are pushed to the handler function at the boundary of the application.
     *  |
     */
    var runUIEff = function (signal) {
        return function (renderComponent) {
            return function (handler) {
                var runUI$prime = function (ref) {
                    var driver = function (i) {
                        return function __do() {
                            var _39 = Control_Monad_Eff_Ref.readRef(ref)();
                            if (_39 instanceof Data_Maybe.Just) {
                                var next = Halogen_Signal.runSF(_39.value0.signal)(i);
                                var _38 = Halogen_Internal_VirtualDOM.patch(Halogen_Signal.head(next))(_39.value0.node)();
                                return Control_Monad_Eff_Ref.writeRef(ref)(new Data_Maybe.Just({
                                    signal: Halogen_Signal.tail(next), 
                                    node: _38
                                }))();
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                    var requestHandler = function (_617) {
                        if (_617 instanceof Data_Either.Left) {
                            return driver(_617.value0);
                        };
                        if (_617 instanceof Data_Either.Right) {
                            return handler(_617.value0)(driver);
                        };
                        throw new Error("Failed pattern match");
                    };
                    var render = Halogen_HTML["renderHtml'"](requestHandler)(renderComponent);
                    var vtrees = Prelude["<$>"](Halogen_Signal.functorSF1)(render)(signal);
                    var node = Halogen_Internal_VirtualDOM.createElement(Halogen_Signal.head(vtrees));
                    var diffs = Prelude[">>>"](Halogen_Signal.semigroupoidSF)(Halogen_Signal.tail(vtrees))(changes(Halogen_Signal.head(vtrees)));
                    return function __do() {
                        Control_Monad_Eff_Ref.writeRef(ref)(new Data_Maybe.Just({
                            signal: diffs, 
                            node: node
                        }))();
                        return new Data_Tuple.Tuple(node, driver);
                    };
                };
                return function __do() {
                    var _40 = Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)();
                    return runUI$prime(_40)();
                };
            };
        };
    };
    return {
        runUIEff: runUIEff, 
        changes: changes
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Events = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Halogen_HTML = PS.Halogen_HTML;
    var Data_Maybe = PS.Data_Maybe;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    var Halogen_HTML_Events_Types = PS.Halogen_HTML_Events_Types;
    
    /**
     *  | This function can be used to attach custom event handlers.
     */
    var handlerMaybe = function (key) {
        return function (f) {
            return new Halogen_HTML.Attribute([ new Halogen_HTML.HandlerAttribute(function (k) {
                return k(key)(function (e) {
                    return f(e);
                });
            }) ]);
        };
    };
    
    /**
     *  | This function can be used to attach custom event handlers.
     */
    var handler = function (key) {
        return function (f) {
            return handlerMaybe(key)(function (e) {
                return Prelude["<$>"](Halogen_HTML_Events_Handler.functorEventHandler)(Data_Maybe.Just.create)(f(e));
            });
        };
    };
    var onclick = handler(Halogen_HTML.eventName("click"));
    return {
        onclick: onclick, 
        handlerMaybe: handlerMaybe, 
        handler: handler
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Events_Forms = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    var Data_Foreign_Class = PS.Data_Foreign_Class;
    var Data_Foreign = PS.Data_Foreign;
    var Halogen_HTML_Events = PS.Halogen_HTML_Events;
    var Halogen_HTML = PS.Halogen_HTML;
    var Data_Traversable = PS.Data_Traversable;
    var DOM = PS.DOM;
    var Data_Maybe = PS.Data_Maybe;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    var Data_Foreign_Index = PS.Data_Foreign_Index;
    
    /**
     *  | Attach event handler to event ```key``` with getting ```prop``` field
     *  | as an argument of handler
     */
    var addForeignPropHandler = function (__dict_IsForeign_482) {
        return function (key) {
            return function (prop) {
                return function (f) {
                    var getProp = function (prop_1) {
                        return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.either(Prelude["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Foreign_Class.readProp(__dict_IsForeign_482)(Data_Foreign_Index.indexString)(prop_1))(Data_Foreign.toForeign));
                    };
                    return Halogen_HTML_Events.handlerMaybe(Halogen_HTML.eventName(key))(function (e) {
                        return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(Halogen_HTML_Events_Handler.applicativeEventHandler)(f)(getProp(prop)(e.target));
                    });
                };
            };
        };
    };
    
    /**
     *  | Attach an event handler which will fire on input
     */
    var onInput = function (__dict_IsForeign_483) {
        return addForeignPropHandler(__dict_IsForeign_483)("input")("value");
    };
    return {
        onInput: onInput
    };
})();
var PS = PS || {};
PS.Halogen_HTML_Attributes = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Halogen_HTML = PS.Halogen_HTML;
    var Data_Traversable = PS.Data_Traversable;
    var Data_String = PS.Data_String;
    var Data_Array = PS.Data_Array;
    var DOM = PS.DOM;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foreign = PS.Data_Foreign;
    var Data_StrMap = PS.Data_StrMap;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Halogen_Internal_VirtualDOM = PS.Halogen_Internal_VirtualDOM;
    
    /**
     *  | A wrapper for strings which are used as CSS classes
     */
    var ClassName = function (x) {
        return x;
    };
    
    /**
     *  | Unpack a class name
     */
    var runClassName = function (_619) {
        return _619;
    };
    
    /**
     *  Create a class name
     */
    var className = ClassName;
    
    /**
     *  | This function can be used to define custom attributes.
     */
    var attribute = function (key) {
        return function (value_1) {
            return new Halogen_HTML.Attribute([ new Halogen_HTML.StringAttribute(key, value_1) ]);
        };
    };
    var classes = function (ss) {
        return attribute(Halogen_HTML.attributeName("className"))(Data_String.joinWith(" ")(Data_Array.map(runClassName)(ss)));
    };
    var href = attribute(Halogen_HTML.attributeName("href"));
    var id_ = attribute(Halogen_HTML.attributeName("id"));
    var name = attribute(Halogen_HTML.attributeName("name"));
    var placeholder = attribute(Halogen_HTML.attributeName("placeholder"));
    var src = attribute(Halogen_HTML.attributeName("src"));
    var type_ = attribute(Halogen_HTML.attributeName("type"));
    var value = attribute(Halogen_HTML.attributeName("value"));
    var alt = attribute(Halogen_HTML.attributeName("alt"));
    return {
        placeholder: placeholder, 
        value: value, 
        type_: type_, 
        src: src, 
        name: name, 
        id_: id_, 
        href: href, 
        classes: classes, 
        alt: alt, 
        attribute: attribute, 
        runClassName: runClassName, 
        className: className
    };
})();
var PS = PS || {};
PS.Halogen_Themes_Bootstrap3 = (function () {
    "use strict";
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Prelude = PS.Prelude;
    var navbarStaticTop = Halogen_HTML_Attributes.className("navbar-static-top");
    var navbarNav = Halogen_HTML_Attributes.className("navbar-nav");
    var navbarLeft = Halogen_HTML_Attributes.className("navbar-left");
    var navbarHeader = Halogen_HTML_Attributes.className("navbar-header");
    var navbarForm = Halogen_HTML_Attributes.className("navbar-form");
    var navbarDefault = Halogen_HTML_Attributes.className("navbar-default");
    var navbarCollapse = Halogen_HTML_Attributes.className("navbar-collapse");
    var navbar = Halogen_HTML_Attributes.className("navbar");
    var nav = Halogen_HTML_Attributes.className("nav");
    var formGroup = Halogen_HTML_Attributes.className("form-group");
    var formControl = Halogen_HTML_Attributes.className("form-control");
    var collapse = Halogen_HTML_Attributes.className("collapse");
    var btnDefault = Halogen_HTML_Attributes.className("btn-default");
    var btn = Halogen_HTML_Attributes.className("btn");
    var active = Halogen_HTML_Attributes.className("active");
    return {
        navbarStaticTop: navbarStaticTop, 
        navbarNav: navbarNav, 
        navbarLeft: navbarLeft, 
        navbarHeader: navbarHeader, 
        navbarForm: navbarForm, 
        navbarDefault: navbarDefault, 
        navbarCollapse: navbarCollapse, 
        navbar: navbar, 
        nav: nav, 
        formGroup: formGroup, 
        formControl: formControl, 
        collapse: collapse, 
        btnDefault: btnDefault, 
        btn: btn, 
        active: active
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Halogen_HTML = PS.Halogen_HTML;
    var Halogen_HTML_Attributes = PS.Halogen_HTML_Attributes;
    var Halogen_Themes_Bootstrap3 = PS.Halogen_Themes_Bootstrap3;
    var Prelude = PS.Prelude;
    var Halogen_HTML_Events_Forms = PS.Halogen_HTML_Events_Forms;
    var Halogen_HTML_Events = PS.Halogen_HTML_Events;
    var Control_Functor = PS.Control_Functor;
    var Halogen_HTML_Events_Handler = PS.Halogen_HTML_Events_Handler;
    var Halogen_Signal = PS.Halogen_Signal;
    var Halogen = PS.Halogen;
    var Data_Void = PS.Data_Void;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    var Halogen_Themes_Bootstrap3_InputGroup = PS.Halogen_Themes_Bootstrap3_InputGroup;
    var Data_Foreign_Class = PS.Data_Foreign_Class;
    function appendToBody(node) {  return function() {    document.body.appendChild(node);  };};
    var Result = (function () {
        function Result() {

        };
        Result.value = new Result();
        return Result;
    })();
    var Query = function (x) {
        return x;
    };
    var Completions = (function () {
        function Completions(value0) {
            this.value0 = value0;
        };
        Completions.create = function (value0) {
            return new Completions(value0);
        };
        return Completions;
    })();
    var Search = (function () {
        function Search(value0) {
            this.value0 = value0;
        };
        Search.create = function (value0) {
            return new Search(value0);
        };
        return Search;
    })();
    var State = (function () {
        function State(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        State.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new State(value0, value1, value2, value3);
                    };
                };
            };
        };
        return State;
    })();
    var SetQuery = (function () {
        function SetQuery(value0) {
            this.value0 = value0;
        };
        SetQuery.create = function (value0) {
            return new SetQuery(value0);
        };
        return SetQuery;
    })();
    var OpenMore = (function () {
        function OpenMore(value0) {
            this.value0 = value0;
        };
        OpenMore.create = function (value0) {
            return new OpenMore(value0);
        };
        return OpenMore;
    })();
    var update = function (_642) {
        return function (_643) {
            if (_643 instanceof SetQuery) {
                return new State(_643.value0, _642.value1, _642.value2, _642.value3);
            };
            throw new Error("Failed pattern match");
        };
    };
    var showQuery = new Prelude.Show(function (_646) {
        return _646;
    });
    var view = function (state) {
        return Halogen_HTML.div_([ Halogen_HTML.div(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.navbar, Halogen_Themes_Bootstrap3.navbarDefault, Halogen_Themes_Bootstrap3.navbarStaticTop ]))([ Halogen_HTML.div(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.navbarHeader, Halogen_Themes_Bootstrap3.navbarLeft ]))([ Halogen_HTML.a(Halogen_HTML_Attributes.href("/"))([ Halogen_HTML.img(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.classes([  ]))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.src("/hayoo.png"))(Halogen_HTML_Attributes.alt("Hayoo! logo"))))([  ]) ]) ]) ]), Halogen_HTML.div(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.navbarCollapse, Halogen_Themes_Bootstrap3.collapse ]))(Halogen_HTML_Attributes.id_("hayoo-navbar-collapse")))([ Halogen_HTML.ul(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.nav, Halogen_Themes_Bootstrap3.navbarNav, Halogen_Themes_Bootstrap3.navbarLeft ]))([ Halogen_HTML.li(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.active ]))([ Halogen_HTML.form(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.navbarForm, Halogen_Themes_Bootstrap3.navbarLeft ]))(Halogen_HTML_Attributes.id_("search")))([ Halogen_HTML.div(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.formGroup ]))([ Halogen_HTML.input(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.formControl ]))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.placeholder("Search"))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.name("query"))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.id_("hayoo"))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.type_("text"))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.value(Prelude.show(showQuery)(state.value0)))(Halogen_HTML_Events_Forms.onInput(Data_Foreign_Class.stringIsForeign)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.pure(Halogen_HTML_Events_Handler.applicativeEventHandler))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Right.create)(Prelude["<<<"](Prelude.semigroupoidArr)(Completions.create)(Query)))))))))))([  ]), Halogen_HTML.input(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.classes([ Halogen_Themes_Bootstrap3.btn, Halogen_Themes_Bootstrap3.btnDefault ]))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.id_("submit"))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.type_("submit"))(Prelude["<>"](Halogen_HTML.semigroupAttribute)(Halogen_HTML_Attributes.value("Search"))(Halogen_HTML_Events.onclick(function (_641) {
            return Control_Functor["$>"](Halogen_HTML_Events_Handler.functorEventHandler)(Halogen_HTML_Events_Handler.preventDefault)(new Data_Either.Right(new Search(state.value0)));
        }))))))([  ]), Halogen_HTML.text(Prelude.show(showQuery)(state.value0)) ]) ]) ]) ]) ]) ]);
    };
    var ui = Prelude["<$>"](Halogen_Signal.functorSF1)(view)(Halogen_Signal.stateful(new State("", [  ], 0, 0))(update));
    var handleRequest = function (_644) {
        return function (_645) {
            if (_644 instanceof Completions) {
                return _645(new SetQuery(_644.value0));
            };
            if (_644 instanceof Search) {
                return _645(new SetQuery(_644.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
    var main = function __do() {
        var _44 = Halogen.runUIEff(ui)(Data_Void.absurd)(handleRequest)();
        return appendToBody(_44.value0)();
    };
    return {
        State: State, 
        Result: Result, 
        Completions: Completions, 
        Search: Search, 
        SetQuery: SetQuery, 
        OpenMore: OpenMore, 
        Query: Query, 
        main: main, 
        handleRequest: handleRequest, 
        ui: ui, 
        view: view, 
        update: update, 
        appendToBody: appendToBody, 
        showQuery: showQuery
    };
})();
PS.Main.main();

},{"virtual-dom/create-element":3,"virtual-dom/diff":4,"virtual-dom/patch":8,"virtual-dom/vnode/vnode":22,"virtual-dom/vnode/vtext":24}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":10}],4:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":26}],5:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":2}],6:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],7:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],8:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":13}],9:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":17,"is-object":6}],10:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":15,"../vnode/is-vnode.js":18,"../vnode/is-vtext.js":19,"../vnode/is-widget.js":20,"./apply-properties":9,"global/document":5}],11:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],12:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var render = require("./create-element")
var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = render(vText, renderOptions)

        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = render(vNode, renderOptions)

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, moves) {
    var childNodes = domNode.childNodes
    var keyMap = {}
    var node
    var remove
    var insert

    for (var i = 0; i < moves.removes.length; i++) {
        remove = moves.removes[i]
        node = childNodes[remove.from]
        if (remove.key) {
            keyMap[remove.key] = node
        }
        domNode.removeChild(node)
    }

    var length = childNodes.length
    for (var j = 0; j < moves.inserts.length; j++) {
        insert = moves.inserts[j]
        node = keyMap[insert.key]
        // this is the weirdest bug i've ever seen in webkit
        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":20,"../vnode/vpatch.js":23,"./apply-properties":9,"./create-element":10,"./update-widget":14}],13:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches) {
    return patchRecursive(rootNode, patches)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions) {
        renderOptions = { patch: patchRecursive }
        if (ownerDocument !== document) {
            renderOptions.document = ownerDocument
        }
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./dom-index":11,"./patch-op":12,"global/document":5,"x-is-array":7}],14:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":20}],15:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":16,"./is-vnode":18,"./is-vtext":19,"./is-widget":20}],16:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],17:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],18:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":21}],19:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":21}],20:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],21:[function(require,module,exports){
module.exports = "2"

},{}],22:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":16,"./is-vhook":17,"./is-vnode":18,"./is-widget":20,"./version":21}],23:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":21}],24:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":21}],25:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":17,"is-object":6}],26:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var orderedSet = reorder(aChildren, b.children)
    var bChildren = orderedSet.children

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (orderedSet.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(
            VPatch.ORDER,
            a,
            orderedSet.moves
        ))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b)
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true
        }
    }

    return false
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {
    // O(M) time, O(M) memory
    var bChildIndex = keyIndex(bChildren)
    var bKeys = bChildIndex.keys
    var bFree = bChildIndex.free

    if (bFree.length === bChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(N) time, O(N) memory
    var aChildIndex = keyIndex(aChildren)
    var aKeys = aChildIndex.keys
    var aFree = aChildIndex.free

    if (aFree.length === aChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(MAX(N, M)) memory
    var newChildren = []

    var freeIndex = 0
    var freeCount = bFree.length
    var deletedItems = 0

    // Iterate through a and match a node in b
    // O(N) time,
    for (var i = 0 ; i < aChildren.length; i++) {
        var aItem = aChildren[i]
        var itemIndex

        if (aItem.key) {
            if (bKeys.hasOwnProperty(aItem.key)) {
                // Match up the old keys
                itemIndex = bKeys[aItem.key]
                newChildren.push(bChildren[itemIndex])

            } else {
                // Remove old keyed items
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        } else {
            // Match the item in a with the next free item in b
            if (freeIndex < freeCount) {
                itemIndex = bFree[freeIndex++]
                newChildren.push(bChildren[itemIndex])
            } else {
                // There are no free items in b to match with
                // the free items in a, so the extra free nodes
                // are deleted.
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        }
    }

    var lastFreeIndex = freeIndex >= bFree.length ?
        bChildren.length :
        bFree[freeIndex]

    // Iterate through b and append any new keys
    // O(M) time
    for (var j = 0; j < bChildren.length; j++) {
        var newItem = bChildren[j]

        if (newItem.key) {
            if (!aKeys.hasOwnProperty(newItem.key)) {
                // Add any new keyed items
                // We are adding new items to the end and then sorting them
                // in place. In future we should insert new items in place.
                newChildren.push(newItem)
            }
        } else if (j >= lastFreeIndex) {
            // Add any leftover non-keyed items
            newChildren.push(newItem)
        }
    }

    var simulate = newChildren.slice()
    var simulateIndex = 0
    var removes = []
    var inserts = []
    var simulateItem

    for (var k = 0; k < bChildren.length;) {
        var wantedItem = bChildren[k]
        simulateItem = simulate[simulateIndex]

        // remove items
        while (simulateItem === null && simulate.length) {
            removes.push(remove(simulate, simulateIndex, null))
            simulateItem = simulate[simulateIndex]
        }

        if (!simulateItem || simulateItem.key !== wantedItem.key) {
            // if we need a key in this position...
            if (wantedItem.key) {
                if (simulateItem && simulateItem.key) {
                    // if an insert doesn't put this key in place, it needs to move
                    if (bKeys[simulateItem.key] !== k + 1) {
                        removes.push(remove(simulate, simulateIndex, simulateItem.key))
                        simulateItem = simulate[simulateIndex]
                        // if the remove didn't put the wanted item in place, we need to insert it
                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
                            inserts.push({key: wantedItem.key, to: k})
                        }
                        // items are matching, so skip ahead
                        else {
                            simulateIndex++
                        }
                    }
                    else {
                        inserts.push({key: wantedItem.key, to: k})
                    }
                }
                else {
                    inserts.push({key: wantedItem.key, to: k})
                }
                k++
            }
            // a key in simulate has no matching wanted key, remove it
            else if (simulateItem && simulateItem.key) {
                removes.push(remove(simulate, simulateIndex, simulateItem.key))
            }
        }
        else {
            simulateIndex++
            k++
        }
    }

    // remove all the remaining nodes from simulate
    while(simulateIndex < simulate.length) {
        simulateItem = simulate[simulateIndex]
        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))
    }

    // If the only moves we have are deletes then we can just
    // let the delete patch remove these items.
    if (removes.length === deletedItems && !inserts.length) {
        return {
            children: newChildren,
            moves: null
        }
    }

    return {
        children: newChildren,
        moves: {
            removes: removes,
            inserts: inserts
        }
    }
}

function remove(arr, index, key) {
    arr.splice(index, 1)

    return {
        from: index,
        key: key
    }
}

function keyIndex(children) {
    var keys = {}
    var free = []
    var length = children.length

    for (var i = 0; i < length; i++) {
        var child = children[i]

        if (child.key) {
            keys[child.key] = i
        } else {
            free.push(i)
        }
    }

    return {
        keys: keys,     // A hash of key name to index
        free: free,     // An array of unkeyed item indices
    }
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":15,"../vnode/is-thunk":16,"../vnode/is-vnode":18,"../vnode/is-vtext":19,"../vnode/is-widget":20,"../vnode/vpatch":23,"./diff-props":25,"x-is-array":7}]},{},[1]);
